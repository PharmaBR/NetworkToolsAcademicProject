"""
NetworkTools - Vers√£o Web
Trabalho 01 - Redes de Computadores

Autor: [Seu Nome]
Data: setembro/2025

Interface web usando Streamlit para an√°lise de redes IP.
Para executar: streamlit run web_app.py
"""

import streamlit as st
from core.network_utils import (
    validar_ip, 
    validar_cidr, 
    cidr_para_mascara_decimal, 
    ips_mesma_rede
)

# IP FIXO DE ORIGEM (Constante conforme requisito)
IP_ORIGEM = "192.168.1.10"


def main():
    """Interface web principal."""
    
    # Configura√ß√£o da p√°gina
    st.set_page_config(
        page_title="NetworkTools - Analisador de Redes",
        page_icon="üåê",
        layout="centered"
    )
    
    # Cabe√ßalho
    st.title("üåê NetworkTools - Analisador de Redes IP")
    st.markdown("---")
    
    # IP de origem fixo
    st.info(f"**IP de Origem (FIXO):** `{IP_ORIGEM}`")
    
    # Formul√°rio de entrada
    st.subheader("üìã Entrada de Dados")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # M√°scara CIDR
        cidr = st.number_input(
            "M√°scara de rede (bits)",
            min_value=0,
            max_value=32,
            value=24,
            help="Digite a quantidade de bits da m√°scara (0-32)"
        )
    
    with col2:
        # IP de destino
        ip_destino = st.text_input(
            "IP de destino",
            value="192.168.1.100",
            help="Digite o IP de destino no formato xxx.xxx.xxx.xxx"
        )
    
    # Bot√£o de an√°lise
    if st.button("üîç Analisar Rede", type="primary"):
        # Valida√ß√µes
        erros = []
        
        if not validar_cidr(cidr):
            erros.append("CIDR deve estar entre 0 e 32")
        
        if not validar_ip(ip_destino):
            erros.append("IP de destino inv√°lido")
        
        if erros:
            # Exibe erros
            for erro in erros:
                st.error(f"‚ùå {erro}")
        else:
            # Processa an√°lise
            try:
                mascara_decimal = cidr_para_mascara_decimal(cidr)
                mesma_rede = ips_mesma_rede(IP_ORIGEM, ip_destino, cidr)
                
                # Exibe resultados
                st.markdown("---")
                st.subheader("üìä Resultados")
                
                # A) M√°scara decimal
                st.markdown("### A) M√°scara de Rede")
                col1, col2 = st.columns(2)
                
                with col1:
                    st.metric("Bits", f"/{cidr}")
                
                with col2:
                    st.metric("Formato Decimal", mascara_decimal)
                
                # B) An√°lise de rede
                st.markdown("### B) An√°lise de Rede")
                
                # Tabela de compara√ß√£o
                dados_comparacao = {
                    "Par√¢metro": ["IP Origem", "IP Destino", "M√°scara"],
                    "Valor": [IP_ORIGEM, ip_destino, f"/{cidr} ({mascara_decimal})"]
                }
                
                st.table(dados_comparacao)
                
                # Resultado final
                if mesma_rede:
                    st.success("‚úÖ **RESULTADO:** Os IPs EST√ÉO na mesma rede!")
                else:
                    st.error("‚ùå **RESULTADO:** Os IPs N√ÉO est√£o na mesma rede!")
                
                # Informa√ß√µes adicionais
                with st.expander("‚ÑπÔ∏è Informa√ß√µes T√©cnicas"):
                    st.write(f"**IP Origem (bin√°rio):** {format(int(''.join(IP_ORIGEM.split('.'))), 'b').zfill(32)}")
                    st.write(f"**IP Destino (bin√°rio):** {format(int(''.join(ip_destino.split('.'))), 'b').zfill(32)}")
                    st.write(f"**M√°scara (bin√°rio):** {'1' * cidr + '0' * (32 - cidr)}")
                
            except Exception as e:
                st.error(f"‚ùå Erro no processamento: {e}")
    
    # Sidebar com informa√ß√µes
    with st.sidebar:
        st.markdown("### üìö Sobre o NetworkTools")
        st.markdown("""
        Este programa foi desenvolvido para an√°lise de redes IP, 
        atendendo aos seguintes requisitos:
        
        **Funcionalidades:**
        - ‚úÖ IP fixo de origem
        - ‚úÖ Convers√£o CIDR ‚Üí Decimal
        - ‚úÖ Verifica√ß√£o de mesma rede
        - ‚úÖ Interface intuitiva
        - ‚úÖ Valida√ß√£o de entradas
        - ‚úÖ Testes unit√°rios
        - ‚úÖ C√≥digo documentado
        """)
        
        st.markdown("### üß™ Exemplos de Teste")
        st.markdown("""
        **Mesma rede (24 bits):**
        - IP1: 192.168.1.10
        - IP2: 192.168.1.100
        
        **Redes diferentes (24 bits):**
        - IP1: 192.168.1.10  
        - IP2: 192.168.2.10
        """)
        
        st.markdown("### üë• Equipe")
        st.markdown("""
        - [Nome 1] - 1¬∫ Semestre
        - [Nome 2] - [Semestre]
        - [Nome 3] - [Semestre]
        - [Nome 4] - [Semestre]
        """)


if __name__ == "__main__":
    main()