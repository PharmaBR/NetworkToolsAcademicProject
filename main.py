"""
NetworkTools - Analisador de Redes IP
Trabalho 01 - Redes de Computadores

Autor: [Seu Nome]
Data: setembro/2025

Este programa analisa redes IP, convertendo m√°scaras CIDR para formato decimal
e verificando se dois IPs est√£o na mesma rede.

Funcionalidades:
1) IP fixo de origem (configur√°vel via constante)
2) Recebe m√°scara de rede em bits CIDR
3) Recebe IP de destino do usu√°rio
4) Mostra m√°scara em formato decimal
5) Informa se IPs est√£o na mesma rede
"""

from core.network_utils import (
    validar_ip, 
    validar_cidr, 
    cidr_para_mascara_decimal, 
    ips_mesma_rede
)

# IP FIXO DE ORIGEM (Constante conforme requisito)
IP_ORIGEM = "192.168.1.10"


def exibir_cabecalho():
    """Exibe o cabe√ßalho do programa."""
    print("=" * 60)
    print("    NETWORKTOOLS - ANALISADOR DE REDES IP")
    print("=" * 60)
    print(f"IP de Origem (FIXO): {IP_ORIGEM}")
    print("=" * 60)


def obter_mascara_cidr():
    """
    Obt√©m a m√°scara CIDR do usu√°rio com valida√ß√£o.
    
    Returns:
        int: M√°scara CIDR v√°lida
    """
    while True:
        try:
            entrada = input("\nDigite a m√°scara de rede em bits (ex: 24): ")
            cidr = int(entrada)
            
            if validar_cidr(cidr):
                return cidr
            else:
                print("‚ùå ERRO: A m√°scara deve estar entre 0 e 32 bits!")
                
        except ValueError:
            print("‚ùå ERRO: Digite apenas n√∫meros!")


def obter_ip_destino():
    """
    Obt√©m o IP de destino do usu√°rio com valida√ß√£o.
    
    Returns:
        str: IP de destino v√°lido
    """
    while True:
        ip_destino = input("Digite o IP de destino (ex: 192.168.1.100): ").strip()
        
        if validar_ip(ip_destino):
            return ip_destino
        else:
            print("‚ùå ERRO: IP inv√°lido! Use o formato xxx.xxx.xxx.xxx (0-255)")


def exibir_resultados(cidr, mascara_decimal, ip_destino, mesma_rede):
    """
    Exibe os resultados da an√°lise.
    
    Args:
        cidr (int): M√°scara CIDR
        mascara_decimal (str): M√°scara em formato decimal
        ip_destino (str): IP de destino
        mesma_rede (bool): Se est√£o na mesma rede
    """
    print("\n" + "=" * 60)
    print("                  RESULTADOS")
    print("=" * 60)
    
    # A) M√°scara em formato decimal
    print(f"\nA) M√ÅSCARA DE REDE:")
    print(f"   {cidr} bits")
    print(f"   {mascara_decimal}")
    
    # B) Verifica√ß√£o de mesma rede
    print(f"\nB) AN√ÅLISE DE REDE:")
    print(f"   IP Origem:  {IP_ORIGEM}")
    print(f"   IP Destino: {ip_destino}")
    print(f"   M√°scara:    /{cidr}")
    
    if mesma_rede:
        print("   ‚úÖ RESULTADO: Os IPs EST√ÉO na mesma rede!")
    else:
        print("   ‚ùå RESULTADO: Os IPs N√ÉO est√£o na mesma rede!")
    
    print("=" * 60)


def main():
    """Fun√ß√£o principal do programa."""
    try:
        # Exibe cabe√ßalho
        exibir_cabecalho()
        
        # Obt√©m dados do usu√°rio
        print("\nüìã ENTRADA DE DADOS:")
        cidr = obter_mascara_cidr()
        ip_destino = obter_ip_destino()
        
        # Processa os dados
        print("\n‚öôÔ∏è  PROCESSANDO...")
        mascara_decimal = cidr_para_mascara_decimal(cidr)
        mesma_rede = ips_mesma_rede(IP_ORIGEM, ip_destino, cidr)
        
        # Exibe resultados
        exibir_resultados(cidr, mascara_decimal, ip_destino, mesma_rede)
        
        # Pergunta se quer continuar
        print("\nDeseja fazer outra an√°lise? (s/n): ", end="")
        resposta = input().lower().strip()
        
        if resposta in ['s', 'sim', 'y', 'yes']:
            print("\n" + "‚îÄ" * 60)
            main()  # Recurs√£o para nova an√°lise
        else:
            print("\nüëã Obrigado por usar o NetworkTools!")
            
    except KeyboardInterrupt:
        print("\n\nüëã Programa interrompido pelo usu√°rio. At√© logo!")
    except Exception as e:
        print(f"\n‚ùå ERRO INESPERADO: {e}")
        print("Entre em contato com o suporte t√©cnico.")


if __name__ == "__main__":
    main()
